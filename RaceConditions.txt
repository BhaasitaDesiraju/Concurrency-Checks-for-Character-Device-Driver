Race conditions:

1. Concurrent Read or write by two or more threads-

Critical Region - 
e2_read() in mode 1 --> ret = count - copy_to_user(buf, devc->ramdisk, count);
e2_write() in mode 1 --> ret = count - copy_from_user(devc->ramdisk, buf, count);

When a user reads or writes to a ramdisk, it has to be locked first.If a user app opens device in mode 1 and spawns two threads, we need to make sure that concurrent read and write do not happen by using locks. The 2 threads aquire and release locks and then they read/write concurrently without any locks. It can be considered as a potential data race.

Semaphore that should be help sem1.
When a process opens() and then spawns 2 threads which share the file descriptor. If the threads call read and write simultaneously we are calling down(sem1) and up(sem1) before actually reading or writing from/to the ramdisk. 

2. Two or more threads run parallel and uses count1 and count2 variables-

Critical Region - 
e2_open() in mode 1 and mode 2
```
    down_interruptible(&devc->sem1);
    if (devc->mode == MODE1) {
        devc->count1++;
        up(&devc->sem1);
        down_interruptible(&devc->sem2);
        return 0;
    }
    else if (devc->mode == MODE2) {
        devc->count2++;
    }
    up(&devc->sem1);```
////////////////////////////////////////////////
e2_release() in mode 1 and mode 2
////////////////////////////////////////////////
```
    down_interruptible(&devc->sem1);
    if (devc->mode == MODE1) {
        devc->count1--;
        if (devc->count1 == 1)
            wake_up_interruptible(&(devc->queue1));
			up(&devc->sem2);
    }
    else if (devc->mode == MODE2) {
        devc->count2--;
        if (devc->count2 == 1)
            wake_up_interruptible(&(devc->queue2));
    }
    up(&devc->sem1);```

Semaphore held during the update - sem1
count1 and count2 is a critical region of the code because multiple threads are using it as a condition variable to come out of wait queues 1 and 2. We are calling down(sem1) and then updating the count1 and count2 before calling up(sem1). This region is protected by the locks and hence no data race exists.


3. Multiple threads use ioctl() to change mode-

Critical Region -
e2_ioctl() - case E2_IOCMODE2:
```
				if (devc->mode == MODE2) {
					up(&devc->sem1);
					break;
				}
				if (devc->count1 > 1) {
					while (devc->count1 > 1) {
						up(&devc->sem1);
					    wait_event_interruptible(devc->queue1, (devc->count1 == 1));
						down_interruptible(&devc->sem1);
					}
				}
				devc->mode = MODE2;
                devc->count1--;
                devc->count2++;
```
We are trying to read from count1 and mode. This is a critical region and it is protected by sem1. If 2 or more threads try to change mode to mode 2 without the sem1 semaphore it becomes a data race. we are calling down(sem1) and then reading or updating count1 and count2 and mode and then calling up(sem1). This has prevented a data race from occuring.


4. Multiple writes in parallel threads-

Critical Region - 
e2_write() in mode 2 --> ret = count - copy_from_user(devc->ramdisk, buf, count);
Writing into the ramdisk by 2 or more threads concurrently is a data race condition. This region is protected by holding the lock sem1. We are doing down(sem1) and then in mode2 we are writing into the ramdisk and then up(sem1). 

